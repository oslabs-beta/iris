version: "3"
services: 
  zookeeper:
    image: "bitnami/zookeeper:latest"
    container_name: "zookeeper"
    ports: 
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
  kafka:
    image: "bitnami/kafka:latest"
    container_name: "kafka"
    ports:
      - "9092:9092"
      - "9991:9991"
    environment:
      - KAFKA_BROKER_ID=1
      - JMX_PORT=9991
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_LOG_RETENTION_MS=60000
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - JVM_ARGS="-Dcom.sun.management.jmxremote.port=9991 -Dcom.sun.management.jmxremote.rmi.port=9991 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false" 

    depends_on:
      - zookeeper
  jmx-kafka:
    image: "sscaling/jmx-prometheus-exporter:latest"
    ports:
     - "5556:5556"
    environment:
     CONFIG_YML : "/etc/jmx_exporter/config.yml"
    volumes:
     - ./docker/jmx_exporter/config_kafka.yml:/etc/jmx_exporter/config.yml
    #  - JVM_OPTS:-Xmx128M
    container_name: jmx-kafka
    depends_on:
     - kafka
  prometheus:
    image: "prom/prometheus:latest"
    ports:
     - "9090:9090"
    volumes:
     - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: "--config.file=/etc/prometheus/prometheus.yml"
    container_name: prometheus
  kafka-test:
    image: node:16-alpine
    entrypoint: 
     - "sh"
     - "-c"
     - "npm install && npm run start:producer && npm run start:consumer"
    depends_on:
     - kafka
    container_name: kafka-test
#   postgres:
#     image: postgres:10.3
#     restart: always
#     environment:
#       - POSTGRES_USER=iris_admin
#       - POSTGRES_PASSWORD=password
#     volumes:
#       - postgres:/var/lib/postgresql/data
#     ports:
#       - '5432:5432'
# volumes:
#   postgres:
